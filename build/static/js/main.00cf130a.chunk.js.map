{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","table","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleshow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00cf130a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/** base url to make requests to the movie database */\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '640',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n\r\n      const handleClick = (movie) => {\r\n          if (trailerUrl) {\r\n              setTrailerUrl('');\r\n          } else {\r\n              movieTrailer(movie?.name || \"\")\r\n              .then((url) => {\r\n\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n\r\n              })\r\n              .catch((error) => console.log(error));\r\n          }\r\n      };\r\n\r\n    console.table(movies);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map((movie) => (\r\n                    <img \r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${\r\n                            isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                        }`}\r\n                        alt={movie.name}\r\n                    />\r\n                ))}\r\n\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />\r\n            };\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;","const API_KEY = \"bfa368afa928904269e437cffd67ccb5\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&Language=en-us`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&Language=en-us`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState , useEffect } from \"react\";\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n            ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n -1) + \" . . . \" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n            backgroundPosition: \"center center\",\r\n            }}\r\n         >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__tittle\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"/>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner","import React, { useState, useEffect } from 'react';\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n    const [show, handleshow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 200) {\r\n                handleshow(true);\r\n            } else handleshow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img \r\n                className=\"nav__logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Logo_Netflix.png/800px-Logo_Netflix.png\"\r\n                alt=\"Netflix Logo\"           \r\n            />\r\n\r\n            <img \r\n                className=\"nav__avatar\"\r\n                src=\"https://pbs.twimg.com/media/DlKNEufWsAAgr2E.jpg\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow={true} />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}